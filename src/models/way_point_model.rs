/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

/// WayPointModel : Geographical points where the transport should pick up OR drop off items.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WayPointModel {
    /// Address information including street name and door number.
    #[serde(rename = "addressStreet")]
    pub address_street: String,
    /// Address information second line if needed. For example: apartment, etc.
    #[serde(rename = "addressAdditional", skip_serializing_if = "Option::is_none")]
    pub address_additional: Option<String>,
    /// Geographical point latitude. This property is optional, if not setted we use addressStreet to get a geolocation value.
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    /// Geographical point longitude. This property is optional, if not setted we use addressStreet to get a geolocation value.
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
    /// Telephone number on geopoint. The phone format must be: * an optional prefix with the symbol + * only numbers, can't have letters * the number must start with a number between 1 and 9 and then 5 to 14 digits (0 to 9)
    #[serde(rename = "phone")]
    pub phone: String,
    /// Responsible on geopoint - Contact person
    #[serde(rename = "name")]
    pub name: String,
    /// Additional information when arriving to geopoint
    #[serde(rename = "instructions", skip_serializing_if = "Option::is_none")]
    pub instructions: Option<String>,
    /// Geographical point's city name. For example: Buenos Aires (AR), Antofagasta (CL), Montevideo (UY).
    #[serde(rename = "city")]
    pub city: String,
    /// What transport should do in that point. Only 1 Pickup & 1 Dropoff is allowed to use
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Specify the amount to collect at dropOff by rider. Only for waypoint type \"DROP_OFF\". This functionality is not turned on by default.
    #[serde(rename = "collectMoney", skip_serializing_if = "Option::is_none")]
    pub collect_money: Option<f64>,
}

impl WayPointModel {
    /// Geographical points where the transport should pick up OR drop off items.
    pub fn new(
        address_street: String,
        phone: String,
        name: String,
        city: String,
        r#type: Type,
    ) -> WayPointModel {
        WayPointModel {
            address_street,
            address_additional: None,
            latitude: None,
            longitude: None,
            phone,
            name,
            instructions: None,
            city,
            r#type,
            collect_money: None,
        }
    }
}
/// What transport should do in that point. Only 1 Pickup & 1 Dropoff is allowed to use
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PICK_UP")]
    PickUp,
    #[serde(rename = "DROP_OFF")]
    DropOff,
}

impl Default for Type {
    fn default() -> Type {
        Self::PickUp
    }
}

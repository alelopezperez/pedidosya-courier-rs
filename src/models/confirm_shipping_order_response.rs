/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ShippingResponseConfirmed : This model represents a shipping estimate order.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfirmShippingResponse {
    /// Shipping estimate identifier
    #[serde(rename = "estimateId", skip_serializing_if = "Option::is_none")]
    pub estimate_id: Option<String>,
    /// Shipping identifier
    #[serde(rename = "shippingId", skip_serializing_if = "Option::is_none")]
    pub shipping_id: Option<String>,
    /// Confirmation code, this field is set when the shipping is CONFIRMED. Use this 'confirmationCode' when you have to contact PedidosYa call center in case of some issue with the shipping order.
    #[serde(rename = "confirmationCode", skip_serializing_if = "Option::is_none")]
    pub confirmation_code: Option<String>,
    /// Boolean that indicates if the shipping was created for testing or production purpose.If isTest = true then the shipping was created for testing/development purpose.
    #[serde(rename = "isTest", skip_serializing_if = "Option::is_none")]
    pub is_test: Option<bool>,
    /// Client Internal Reference ID. This value will be used by the rider to identify the shipping order in pickup point.
    #[serde(rename = "referenceId", skip_serializing_if = "Option::is_none")]
    pub reference_id: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::ShippingStatus>,
    /// This flag indicates whenever shipping order has proof of delivery. Proof of delivery could be either a signature or a photo. You can get the proof of delivery in this endpoint: <a href='#tag/Shippings/paths/~1v3~1shippings~1%7Bid%7D~1proofOfDelivery/get'>Get Shipping Order Proof of Delivery</a>.
    #[serde(rename = "proofOfDelivery", skip_serializing_if = "Option::is_none")]
    pub proof_of_delivery: Option<bool>,
    /// Shipping´s location URL map webpage. This allows you to track your shipping order using PedidosYa technologies. This will only be sent for real orders, not for testing orders.
    #[serde(rename = "shareLocationUrl", skip_serializing_if = "Option::is_none")]
    pub share_location_url: Option<String>,
    /// This email will be used to send shipping confirmation and cancellation notifications to the end user.
    #[serde(rename = "notificationMail", skip_serializing_if = "Option::is_none")]
    pub notification_mail: Option<String>,
    /// This field is DEPRECATED. Now to access at online support is necessary enter at web courier business https://envios.pedidosya.com, log in with your credentials, and navigate to the 'Mis envíos' section
    #[serde(rename = "onlineSupportUrl", skip_serializing_if = "Option::is_none")]
    pub online_support_url: Option<String>,
    /// List of items shipped in the package
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<models::ShippingItemRequest>>,
    /// Geographical points where transport should go. There must be two waypoints, one with type PICK_UP & one DROP_OFF. The geographical points must be inside the PedidosYa fleet's working zone. You can obtain the working zones in the endpoint <a href='#tag/Coverage/paths/~1v3~1working-zones/get'>Get Working Zones</a>.
    #[serde(rename = "waypoints", skip_serializing_if = "Option::is_none")]
    pub waypoints: Option<Vec<models::WayPointModelResponse>>,
    #[serde(rename = "route", skip_serializing_if = "Option::is_none")]
    pub route: Option<models::ShippingRoute>,
    /// Shipping created datetime in UTC. Format ISO 8601: YYYY-MM-DDTHH:MM:SSZ
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
}

impl ConfirmShippingResponse {
    /// This model represents a shipping estimate order.
    pub fn new() -> Self {
        Self {
            estimate_id: None,
            shipping_id: None,
            confirmation_code: None,
            is_test: None,
            reference_id: None,
            status: None,
            proof_of_delivery: None,
            share_location_url: None,
            notification_mail: None,
            online_support_url: None,
            items: None,
            waypoints: None,
            route: None,
            created_at: None,
        }
    }
}

/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ShippingRoutePricing : Delivery offer pricing information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingRoutePricing {
    /// Shipping amount without taxes
    #[serde(rename = "subtotal", skip_serializing_if = "Option::is_none")]
    pub subtotal: Option<f64>,
    /// Shipping taxes
    #[serde(rename = "taxes", skip_serializing_if = "Option::is_none")]
    pub taxes: Option<f64>,
    /// Shipping total amount
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    /// Shipping amount's currency in ISO 4217 currency names.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Currency>,
}

impl ShippingRoutePricing {
    /// Delivery offer pricing information
    pub fn new() -> ShippingRoutePricing {
        ShippingRoutePricing {
            subtotal: None,
            taxes: None,
            total: None,
            currency: None,
        }
    }
}
/// Shipping amount's currency in ISO 4217 currency names.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "UYU")]
    Uyu,
    #[serde(rename = "CLP")]
    Clp,
    #[serde(rename = "ARS")]
    Ars,
    #[serde(rename = "USD")]
    Usd,
    #[serde(rename = "BRL")]
    Brl,
    #[serde(rename = "COP")]
    Cop,
    #[serde(rename = "PEN")]
    Pen,
    #[serde(rename = "VES")]
    Ves,
    #[serde(rename = "MXN")]
    Mxn,
    #[serde(rename = "PAB")]
    Pab,
    #[serde(rename = "PYG")]
    Pyg,
    #[serde(rename = "CRC")]
    Crc,
    #[serde(rename = "BOB")]
    Bob,
    #[serde(rename = "DOP")]
    Dop,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Uyu
    }
}

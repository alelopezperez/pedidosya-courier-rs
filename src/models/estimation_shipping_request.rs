/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EstimationShippingRequest : This model represents an order that must be created.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EstimationShippingRequest {
    /// Client Internal Reference ID. This value will be used by the rider to identify the shipping order in pickup point.
    #[serde(rename = "referenceId")]
    pub reference_id: String,
    /// Desired delivery time in UTC, for example, 2023-01-21T12:21:00Z. Format ISO 8601: YYYY-MM-DDTHH:MM:SSZ. This time is the shipping's first destination - drop off time. If the fleet is busy we could change this time with the fleet delay. The desired time must be in PedidosYa fleet's schedules. You can get the schedules in the endpoint <a href='#tag/Schedules/paths/~1v3~1schedules/get'>Get Schedules</a>
    #[serde(rename = "deliveryTime", skip_serializing_if = "Option::is_none")]
    pub delivery_time: Option<String>,
    /// If you are creating a TEST shipping, set this field true
    #[serde(rename = "isTest", skip_serializing_if = "Option::is_none")]
    pub is_test: Option<bool>,
    /// List of items shipped in the package. There must be at least one item and less than a hundred. The sum of the declared values for each item must be less than a million.
    #[serde(rename = "items")]
    pub items: Vec<models::ShippingItemRequest>,
    /// Geographical points where transport should go. There must be two waypoints, one with type PICK_UP & one DROP_OFF. The geographical points must be inside the PedidosYa fleet's working zone. You can obtain the working zones in the endpoint <a href='#tag/Coverage/paths/~1v3~1working-zones/get'>Get Working Zones</a>.
    #[serde(rename = "waypoints")]
    pub waypoints: Vec<models::WayPointModel>,
    /// This email will be used to send shipping confirmation and cancellation notifications to the end user.
    #[serde(rename = "notificationMail", skip_serializing_if = "Option::is_none")]
    pub notification_mail: Option<String>,
    #[serde(rename = "requirements", skip_serializing_if = "Option::is_none")]
    pub requirements: Option<models::ShippingRequestRequirements>,
}

impl EstimationShippingRequest {
    /// This model represents an order that must be created.
    pub fn new(
        reference_id: String,
        items: Vec<models::ShippingItemRequest>,
        waypoints: Vec<models::WayPointModel>,
    ) -> EstimationShippingRequest {
        EstimationShippingRequest {
            reference_id,
            delivery_time: None,
            is_test: None,
            items,
            waypoints,
            notification_mail: None,
            requirements: None,
        }
    }
}

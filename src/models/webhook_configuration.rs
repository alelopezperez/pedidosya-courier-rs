/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebhookConfiguration : Callback to different topics. Right now we only provide SHIPPING_STATUS topic, but more topics will be available in future.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookConfiguration {
    /// The isTest attribute allows the configuration of a second webhook for testing/develop environment.
    #[serde(rename = "isTest", skip_serializing_if = "Option::is_none")]
    pub is_test: Option<bool>,
    /// Communication type. Right now we only allow WEBHOOK.
    #[serde(rename = "notificationType")]
    pub notification_type: NotificationType,
    /// Communication topic. Right now we only send shipping status messages.
    #[serde(rename = "topic")]
    pub topic: Topic,
    /// Array of urls/authorizationKey where we will comunicate the order's status changes. It's allowed maximum 3 urls for each environment configuration.
    #[serde(rename = "urls")]
    pub urls: Vec<models::Urls>,
}

impl WebhookConfiguration {
    /// Callback to different topics. Right now we only provide SHIPPING_STATUS topic, but more topics will be available in future.
    pub fn new(
        notification_type: NotificationType,
        topic: Topic,
        urls: Vec<models::Urls>,
    ) -> WebhookConfiguration {
        WebhookConfiguration {
            is_test: None,
            notification_type,
            topic,
            urls,
        }
    }
}
/// Communication type. Right now we only allow WEBHOOK.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NotificationType {
    #[serde(rename = "WEBHOOK")]
    Webhook,
}

impl Default for NotificationType {
    fn default() -> NotificationType {
        Self::Webhook
    }
}
/// Communication topic. Right now we only send shipping status messages.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Topic {
    #[serde(rename = "SHIPPING_STATUS")]
    ShippingStatus,
}

impl Default for Topic {
    fn default() -> Topic {
        Self::ShippingStatus
    }
}

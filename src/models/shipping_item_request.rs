/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

/// ShippingItemRequest : Item's description. A package shipped could have multiple items.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShippingItemRequest {
    /// Item type to know and calculate de best rider option
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Value of the item shipped. Min value is 0 and max value is 1M (one million). The maximum allowed value will depend on the insured coverage, and the calculation is made by summing up all the items submitted.\"
    #[serde(rename = "value")]
    pub value: f64,
    /// Description of the item shipped
    #[serde(rename = "description")]
    pub description: String,
    /// Item SKU identifier
    #[serde(rename = "sku", skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    /// Quantity of the same item. Min value 1, and max value is 10000
    #[serde(rename = "quantity")]
    pub quantity: i32,
    /// Item's volume in cm3. Min value 0.00, and max value is 80840.00 (47*43*40cm3)
    #[serde(rename = "volume")]
    pub volume: f64,
    /// Weight of a unit of the item in kilograms with two decimals. Min value is 0.00, and max value is 20.00 kg
    #[serde(rename = "weight")]
    pub weight: f64,
}

impl ShippingItemRequest {
    /// Item's description. A package shipped could have multiple items.
    pub fn new(
        value: f64,
        description: String,
        quantity: i32,
        volume: f64,
        weight: f64,
    ) -> ShippingItemRequest {
        ShippingItemRequest {
            r#type: None,
            value,
            description,
            sku: None,
            quantity,
            volume,
            weight,
        }
    }
}
/// Item type to know and calculate de best rider option
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "STANDARD")]
    Standard,
    #[serde(rename = "FRAGILE")]
    Fragile,
    #[serde(rename = "COLD")]
    Cold,
}

impl Default for Type {
    fn default() -> Type {
        Self::Standard
    }
}

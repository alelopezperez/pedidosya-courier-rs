/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ShippingStatus : Shippings status. Status values are: * Rejected: Shipping order requested but rejected due to invalid data * Confirmed: Shipping order confirmed and awaiting for dispatching  * In Progress: Transport has been assigned   * Near Pickup: Transport is near pickup point  * Picked up: Transport picked up the order's items  * Near Dropoff: Transport is closest to dropoff point  * Completed: Transport had delivered the items  * Cancelled: Shipping order cancelled for any reason. <br><br>
/// Shippings status. Status values are: * Rejected: Shipping order requested but rejected due to invalid data * Confirmed: Shipping order confirmed and awaiting for dispatching  * In Progress: Transport has been assigned   * Near Pickup: Transport is near pickup point  * Picked up: Transport picked up the order's items  * Near Dropoff: Transport is closest to dropoff point  * Completed: Transport had delivered the items  * Cancelled: Shipping order cancelled for any reason. <br><br>
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShippingStatus {
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "CONFIRMED")]
    Confirmed,
    #[serde(rename = "IN_PROGRESS")]
    InProgress,
    #[serde(rename = "NEAR_PICKUP")]
    NearPickup,
    #[serde(rename = "PICKED_UP")]
    PickedUp,
    #[serde(rename = "NEAR_DROPOFF")]
    NearDropoff,
    #[serde(rename = "COMPLETED")]
    Completed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
}

impl std::fmt::Display for ShippingStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Rejected => write!(f, "REJECTED"),
            Self::Confirmed => write!(f, "CONFIRMED"),
            Self::InProgress => write!(f, "IN_PROGRESS"),
            Self::NearPickup => write!(f, "NEAR_PICKUP"),
            Self::PickedUp => write!(f, "PICKED_UP"),
            Self::NearDropoff => write!(f, "NEAR_DROPOFF"),
            Self::Completed => write!(f, "COMPLETED"),
            Self::Cancelled => write!(f, "CANCELLED"),
        }
    }
}

impl Default for ShippingStatus {
    fn default() -> ShippingStatus {
        Self::Rejected
    }
}

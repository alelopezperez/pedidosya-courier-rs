/*
 * PedidosYa Courier API
 *
 * PedidosYa Courier API allows developers to build applications that automates the use of PedidosYa's logistics network. Through this it's possible to ship packages from a pickup point to a dropoff point.  To start using the PedidosYa Courier API you need to Generate an Authentication Token. You could get information about this [here](https://developers.pedidosya.com/courier-doc/first-steps#generate-token). All endpoints require an authorization header with a token value. The content of the header should look like the following: 'Authorization: token' <br> <br>
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DeliveryOffer : Delivery offer available for the order. This field has data related to delivery type, price and times info.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeliveryOffer {
    /// Delivery offer id. You need this deliveryOfferId to confirm a specific delivery offer from an estimation.
    #[serde(rename = "deliveryOfferId", skip_serializing_if = "Option::is_none")]
    pub delivery_offer_id: Option<String>,
    /// Delivery mode.   The EXPRESS mode means a shipping order that will be delivered 'as soon as possible'.   The SCHEDULED mode means a shipping order that will be delivered 'in a specific time frame'.
    #[serde(rename = "deliveryMode", skip_serializing_if = "Option::is_none")]
    pub delivery_mode: Option<DeliveryMode>,
    /// Estimated pick-up time in UTC. Format ISO 8601: YYYY-MM-DDTHH:MM:SSZ
    #[serde(
        rename = "estimatedPickUpTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub estimated_pick_up_time: Option<String>,
    /// Estimated rider driving time between pick-up geopoint and drop-off geopoint. This value is measured in minutes.
    #[serde(
        rename = "estimatedDrivingTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub estimated_driving_time: Option<i32>,
    /// This is the minimum promised time limit for the order's delivery. (In UTC).
    #[serde(rename = "deliveryTimeFrom", skip_serializing_if = "Option::is_none")]
    pub delivery_time_from: Option<String>,
    /// This is the maximum promised time limit for the order's delivery. (In UTC).
    #[serde(rename = "deliveryTimeTo", skip_serializing_if = "Option::is_none")]
    pub delivery_time_to: Option<String>,
    /// This is the time limit for confirming this deliveryOffer. You will not be able to confirm the deliveryOffer after this time limit. (In UTC)
    #[serde(
        rename = "confirmationTimeLimit",
        skip_serializing_if = "Option::is_none"
    )]
    pub confirmation_time_limit: Option<String>,
    #[serde(rename = "pricing", skip_serializing_if = "Option::is_none")]
    pub pricing: Option<Box<models::ShippingRoutePricing>>,
}

impl DeliveryOffer {
    /// Delivery offer available for the order. This field has data related to delivery type, price and times info.
    pub fn new() -> DeliveryOffer {
        DeliveryOffer {
            delivery_offer_id: None,
            delivery_mode: None,
            estimated_pick_up_time: None,
            estimated_driving_time: None,
            delivery_time_from: None,
            delivery_time_to: None,
            confirmation_time_limit: None,
            pricing: None,
        }
    }
}
/// Delivery mode.   The EXPRESS mode means a shipping order that will be delivered 'as soon as possible'.   The SCHEDULED mode means a shipping order that will be delivered 'in a specific time frame'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeliveryMode {
    #[serde(rename = "EXPRESS")]
    Express,
    #[serde(rename = "SCHEDULED")]
    Scheduled,
}

impl Default for DeliveryMode {
    fn default() -> DeliveryMode {
        Self::Express
    }
}
